omit.table.layout = "n")
library(stargazer)
stargazer(model_transform, model_key, model1,
title = "Linear Models Parameters Predicting Crime Rate"
type = 'text', report = 'vc',
library(stargazer)
stargazer(model_transform, model_key, model1,
title = "Linear Models Parameters Predicting Crime Rate",
type = 'text', report = 'vc',
keep.stat = c('rsq', 'n'),
omit.table.layout = "n")
library(stargazer)
options(warn = -1)
stargazer(model_transform, model_key, model1,
title = "Linear Models Parameters Predicting Crime Rate",
type = 'text', report = 'vc',
keep.stat = c('rsq', 'n'),
omit.table.layout = 'n')
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Import all libraries that will be used in the lab
library(car)
library(reshape2)
library(ggplot2)
library(stargazer)
library(sandwich)
library(lmtest)
# Adam's dir
mydir <- "/Users/adamyang/Desktop/w203/Lab3/w203-Lab3/"
# Armand's dir
# mydir<-"C:/Users/ak021523/Documents/GitHub/mids-repos/W203/Homework/w203-Lab3/"
#jim's directory
#mydir<- "F:/users/jddel/Documents/DATA_SCIENCE_DEGREE_LAPTOP/W203_Stats/Lab_03/"
# read df
crime_df = read.csv(paste0(mydir,'crime_v2.csv'))
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Import all libraries that will be used in the lab
library(car)
library(reshape2)
library(ggplot2)
library(stargazer)
library(sandwich)
library(lmtest)
# Adam's dir
mydir <- "/Users/adamyang/Desktop/w203/Lab3/w203-Lab3/"
# Armand's dir
# mydir<-"C:/Users/ak021523/Documents/GitHub/mids-repos/W203/Homework/w203-Lab3/"
#jim's directory
#mydir<- "F:/users/jddel/Documents/DATA_SCIENCE_DEGREE_LAPTOP/W203_Stats/Lab_03/"
# read df
crime_df = read.csv(paste0(mydir,'crime_v2.csv'))
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Import all libraries that will be used in the lab
library(car)
library(reshape2)
library(ggplot2)
library(stargazer)
library(sandwich)
library(lmtest)
# Adam's dir
mydir <- "/Users/adamyang/Desktop/w203/Lab3/w203-Lab3/"
# Armand's dir
# mydir<-"C:/Users/ak021523/Documents/GitHub/mids-repos/W203/Homework/w203-Lab3/"
#jim's directory
#mydir<- "F:/users/jddel/Documents/DATA_SCIENCE_DEGREE_LAPTOP/W203_Stats/Lab_03/"
# read df
crime_df = read.csv(paste0(mydir,'crime_v2.csv'))
# summarize all vars
summary(crime_df)
str(crime_df)
# get rid of rows with missing values (this only kills the 6 blank rows)
crime_df<-crime_df[complete.cases(crime_df),]
# convert prob of conviction to numeric
crime_df$prbconv <- as.numeric(as.character(crime_df$prbconv))
boxplot(crime_df$polpc, main ='polpc')
boxplot(crime_df$prbarr, main ='prbarr')
boxplot(crime_df$wser, main = 'wser')
boxplot(crime_df$taxpc, main = 'taxpc')
# 1.5 IQR from the Q3 = outlier but we can decide which to eliminate
#TODO - fix matrix sizing
#correlation matrix for top 4 correlation and bottom 4 correlation
cor_dr = cor(crime_df[c('prbarr',
'prbpris',
'prbconv',
'avgsen',
'polpc',
'density',
'taxpc',
'west',
'central',
'urban',
'pctmin80',
'wcon',
'wtuc',
'wtrd',
'wfir',
'wser',
'wmfg',
'wfed',
'wsta',
'wloc',
'mix',
'pctymle')],
use = "complete.obs")
# Heatmap
ggplot(data = melt(cor_dr, na.rm = TRUE),
aes(Var2, Var1, fill = value))+
theme_minimal()+
geom_tile(color = 'white')+
scale_fill_gradient2(low = 'blue',
high = "orange",
mid = 'white',
midpoint = 0,
limit = c(-1,1),
name= 'Correlation')+
theme(axis.text.x = element_text(face='bold',
angle=90,
vjust = 1,
size =8,
hjust = 1),
axis.text.y = element_text(face='bold',
size=8),
axis.title.x=element_blank(),
axis.title.y=element_blank())
plot(crime_df$urban, crime_df$density)
plot(crime_df$west, crime_df$pctmin80)
plot(crime_df$wtrd, crime_df$wfir)
plot(crime_df$wtrd, crime_df$wfed)
plot(crime_df$wfed, crime_df$wfir)
plot(crime_df$wfed+crime_df$wtrd+crime_df$wfir, crime_df$density)
spm(~crmrte + polpc + prbarr + density + pctmin80, data=crime_df)
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
summary(model1)$r.squared
summary(model1)$coefficients
plot(model1, which=1)
plot(model1, which=2)
plot(model1, which=3)
# Breusch-Pagan
bptest(model1)
#6.278e-5
ncvTest(model1)
plot(model1, which=5)
# Residuals vs. Fitted Plot
plot(model1, which=1)
#
plot(model1, which=3)
# Scale-Location Plot
plot(model1, which=3)
# Breusch-Pagan
bptest(model1)
# Q-Q plot of residuals
plot(model1, which=2)
hist(model1$residuals, breaks=20)
View(model1)
View(model1)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Import all libraries that will be used in the lab
library(car)
library(reshape2)
library(ggplot2)
library(stargazer)
library(sandwich)
library(lmtest)
# Adam's dir
mydir <- "/Users/adamyang/Desktop/w203/Lab3/w203-Lab3/"
# Armand's dir
# mydir<-"C:/Users/ak021523/Documents/GitHub/mids-repos/W203/Homework/w203-Lab3/"
#jim's directory
#mydir<- "F:/users/jddel/Documents/DATA_SCIENCE_DEGREE_LAPTOP/W203_Stats/Lab_03/"
# read df
crime_df = read.csv(paste0(mydir,'crime_v2.csv'))
# summarize all vars
summary(crime_df)
str(crime_df)
# get rid of rows with missing values (this only kills the 6 blank rows)
crime_df<-crime_df[complete.cases(crime_df),]
# convert prob of conviction to numeric
crime_df$prbconv <- as.numeric(as.character(crime_df$prbconv))
boxplot(crime_df$polpc, main ='polpc')
boxplot(crime_df$prbarr, main ='prbarr')
boxplot(crime_df$wser, main = 'wser')
boxplot(crime_df$taxpc, main = 'taxpc')
# 1.5 IQR from the Q3 = outlier but we can decide which to eliminate
#TODO - fix matrix sizing
#correlation matrix for top 4 correlation and bottom 4 correlation
cor_dr = cor(crime_df[c('prbarr',
'prbpris',
'prbconv',
'avgsen',
'polpc',
'density',
'taxpc',
'west',
'central',
'urban',
'pctmin80',
'wcon',
'wtuc',
'wtrd',
'wfir',
'wser',
'wmfg',
'wfed',
'wsta',
'wloc',
'mix',
'pctymle')],
use = "complete.obs")
# Heatmap
ggplot(data = melt(cor_dr, na.rm = TRUE),
aes(Var2, Var1, fill = value))+
theme_minimal()+
geom_tile(color = 'white')+
scale_fill_gradient2(low = 'blue',
high = "orange",
mid = 'white',
midpoint = 0,
limit = c(-1,1),
name= 'Correlation')+
theme(axis.text.x = element_text(face='bold',
angle=90,
vjust = 1,
size =8,
hjust = 1),
axis.text.y = element_text(face='bold',
size=8),
axis.title.x=element_blank(),
axis.title.y=element_blank())
plot(crime_df$urban, crime_df$density)
plot(crime_df$west, crime_df$pctmin80)
plot(crime_df$wtrd, crime_df$wfir)
plot(crime_df$wtrd, crime_df$wfed)
plot(crime_df$wfed, crime_df$wfir)
plot(crime_df$wfed+crime_df$wtrd+crime_df$wfir, crime_df$density)
spm(~crmrte + polpc + prbarr + density + pctmin80, data=crime_df)
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste("The adjusted r square of this model is", summary(model1)$r.adj.squared)
summary(model1)$coefficients
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste("The adjusted r square of this model is" summary(model1)$r.adj.squared)
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
summary(model1)$coefficients
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
#summary(model1)$coefficients
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
coeftest(model_1, vcov = vcovHC)
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
coeftest(model1, vcov = vcovHC)
#summary(model1)$coefficients
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
coeftest(model1, vcov = vcovHC)
stargazer(model1, title = "Base Model",type = "text", report = "vc", keep.stat =c("rsq", "n"),omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
#paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
#coeftest(model1, vcov = vcovHC)
stargazer(model1, title = "Base Model",type = "text", report = "vc", keep.stat =c("rsq", "n"),omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
#paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
#coeftest(model1, vcov = vcovHC)
stargazer(model1, title = "Base Model",type = "latex", report = "vc", keep.stat =c("rsq", "n"),omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
#paste('The adjusted r square of this model is', summary(model1)$r.adj.squared)
#coeftest(model1, vcov = vcovHC)
stargazer(model1, title = "Base Model",type = "text", report = "vc", keep.stat =c("rsq", "n"),omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
#TO DO: need results = asis?
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
# Make a variable that will hold robust standard errors
s_robust <-summary(model1)
# Replace regular SE with the heteroskedasticity-consistent SEs
# also replace t statistic and p values
se_hc <- sqrt(diag(vcovHC(m2, type = "HC1")))
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
#TO DO: need results = asis?
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
# Make a variable that will hold robust standard errors
s_robust <-summary(model1)
# Replace regular SE with the heteroskedasticity-consistent SEs
# also replace t statistic and p values
se_hc <- sqrt(diag(vcovHC(model1, type = "HC1")))
s_robust$coefficients[, 2] <- se_hc
s_robust$coefficients[, 3] <- s_robust$coefficients[, 1] / s_robust$coefficients[, 2]
s_robust$coefficients[, 4]<- 1- pt(s_robust$coefficients[, 3], df=nobs(model1)-1)
stargazer(model1, type = "latex",
se = se_hc,
omit.stat = "f")
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "latex", report = "vc", keep.stat =c("rsq", "n"), se = se.model1, omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
#TO DO: need results = asis?
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
# Make a variable that will hold robust standard errors
s_robust <-summary(model1)
# Replace regular SE with the heteroskedasticity-consistent SEs
# also replace t statistic and p values
se_hc <- sqrt(diag(vcovHC(model1, type = "HC1")))
s_robust$coefficients[, 2] <- se_hc
s_robust$coefficients[, 3] <- s_robust$coefficients[, 1] / s_robust$coefficients[, 2]
s_robust$coefficients[, 4]<- 1- pt(s_robust$coefficients[, 3], df=nobs(model1)-1)
stargazer(model1, type = "text",
se = se_hc,
omit.stat = "f")
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vc", keep.stat =c("rsq", "n"), se = se.model1, omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
#TO DO: need results = asis?
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
# Make a variable that will hold robust standard errors
s_robust <-summary(model1)
# Replace regular SE with the heteroskedasticity-consistent SEs
# also replace t statistic and p values
se_hc <- sqrt(diag(vcovHC(model1, type = "HC1")))
s_robust$coefficients[, 2] <- se_hc
s_robust$coefficients[, 3] <- s_robust$coefficients[, 1] / s_robust$coefficients[, 2]
s_robust$coefficients[, 4]<- 1- pt(s_robust$coefficients[, 3], df=nobs(model1)-1)
stargazer(model1, type = "text",
se = se_hc,
omit.stat = "f")
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vc", omit.stat = "f", se = se.model1, omit.table.layout = "n")
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: clean up this part of the code so we show only what we need. If we want to show coefficients/r.squared, we have to discuss them.
#TO DO: need results = asis?
model1 <- lm(crmrte ~ prbarr + density + polpc + pctmin80 , data = crime_df)
# Make a variable that will hold robust standard errors
s_robust <-summary(model1)
# Replace regular SE with the heteroskedasticity-consistent SEs
# also replace t statistic and p values
se_hc <- sqrt(diag(vcovHC(model1, type = "HC1")))
s_robust$coefficients[, 2] <- se_hc
s_robust$coefficients[, 3] <- s_robust$coefficients[, 1] / s_robust$coefficients[, 2]
s_robust$coefficients[, 4]<- 1- pt(s_robust$coefficients[, 3], df=nobs(model1)-1)
stargazer(model1, type = "text",
se = se_hc,
omit.stat = "f")
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.1,0.001))
#summary(model1)$coefficients
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
stargazer(model1, type = "text",
se = se_hc,
omit.stat = "f")
stargazer(model1, type = "text",
se = se_hc,
omit.stat = "f", star.cutoffs = c(0.05,0.01,0.001))
stargazer(model1, type = "text",
se = se_hc, report = "vcstp",
omit.stat = "f", star.cutoffs = c(0.05,0.01,0.001))
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcstp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
se_hc <- sqrt(diag(vcovHC(model1)))
s_robust$coefficients[, 2] <- se_hc
s_robust$coefficients[, 3] <- s_robust$coefficients[, 1] / s_robust$coefficients[, 2]
s_robust$coefficients[, 4]<- 1- pt(s_robust$coefficients[, 3], df=nobs(model1)-1)
stargazer(model1, type = "text",
se = se_hc, report = "vcstp",
omit.stat = "f", star.cutoffs = c(0.05,0.01,0.001))
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcstp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcstp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
# Q-Q plot of Standardized Residuals
plot(model1, which=2)
shapiro.test(model1$residuals)
plot(model1, which=5)
# TO DO: If we want to show coefficients/r.squared, we have to discuss them.
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcstp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: If we want to show coefficients/r.squared, we have to discuss them.
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: If we want to show coefficients/r.squared, we have to discuss them.
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: If we want to show coefficients/r.squared, we have to discuss them.
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: If we want to show coefficients/r.squared, we have to discuss them.
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
hist(crime_df$pctmin80)
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
# TO DO: If we want to show coefficients/r.squared, we have to discuss them.
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
coeftest(model1, vcovHC)
#TO DO: mention how we will analyze the statistical and practical significance of these coefficients in a later section
plot(model1, which=5)
View(model1)
View(crime_df)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
summary(model1)$r.adj.squared
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
summary(model1)$
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
summary(model1)$adj.r.square
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
paste("adj.r.square:", summary(model1)$adj.r.square)
paste("adj.r.square:", summary(model1)$r.square)
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
paste("adj.r.square:", summary(model1)$adj.r.squared)
paste("r.square:", summary(model1)$r.squared)
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#TO DO: fix stargazer so it shows the t and p values
#stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = se.model1, star.cutoffs = c(0.05,0.01,0.001))
paste("adj.r.square:", summary(model1)$adj.r.squared)
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = list(se.model1, NULL), star.cutoffs = c(0.05,0.01,0.001))
#paste("adj.r.square:", summary(model1)$adj.r.squared)
#coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = list(se.model1, NULL), star.cutoffs = c(0.05,0.01,0.001))
#paste("adj.r.square:", summary(model1)$adj.r.squared)
#coeftest(model1, vcovHC)
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = list(se.model1, NULL), star.cutoffs = c(0.05,0.01,0.001))
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcsp", omit.stat = "f", se = list(se.model1, NULL), star.cutoffs = c(0.05,0.01,0.001))
#paste("adj.r.square:", summary(model1)$adj.r.squared)
coeftest(model1, vcovHC)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
se.model1 <- sqrt(diag(vcovHC(model1)))
stargazer(model1, title = "Base Model",type = "text", report = "vcstp", omit.stat = "f", se = list(se.model1, NULL), star.cutoffs = c(0.05,0.01,0.001))
#paste("adj.r.square:", summary(model1)$adj.r.squared)
coeftest(model1, vcovHC)
# TO DO: Use this at the end (section 4.3)
# Replace regular Standard Errors with the heteroskedasticity-robust Standard Errors
#se.model1 <- sqrt(diag(vcovHC(model1)))
#stargazer(model1, title = "Base Model",type = "text", report = "vcstp", omit.stat = "f", se = list(se.model1, NULL), star.cutoffs = c(0.05,0.01,0.001))
paste("adj.r.square:", summary(model1)$adj.r.squared)
coeftest(model1, vcovHC)
